
## 요구사항 확인

1. 소프트웨어 설계 시 구축된 플랫폼의 성능 특성 분석에 사용되는 측정 항목
- 경과시간, 사용률(utilization), 응답시간(response time), 가용성(availability) (경사응가)

2. DBMS 분석 시 고려 사항
- 가용성, 성능, 상호 호환성, 기술 지원, 구축 비용

3. 현행 시스템 분석에서 고려해야 할 항목
- DBMS 현행 시스템 분석, 네트워크 현행 시스템 분석, 운영체제 현행 시스템 분석

4. 현생 시스템 분석 활동
- 현행 시스템 네트워크 분석, 현행 시스템 DBMS 분석, 현행 시스템 운영체제 분석, 플랫폼 기능/성능 특성 분석, 비즈니스 융합 분석

5. 현생 시스템 분석을 위한 플랫폼 성능 특성 분석의 기법
- 성능 테스트, 사용자 인터뷰, 산출물 점검

6. 비즈니스 융합의 유형
- 고객 가치형(why), 공급 역량형(who), 시장 유통형(whom)

7. 운영체제 분석 시 고려사항
- 품질측면: 신뢰도, 성능 / 지원측면: 기술지원, 주변기기, 구축비용

8. DBMS 현행 시스템 분석 시 고려사항(가성호기구)
- 가용성, 성능, 상호 호환성, 기술 지원, 구축 비용

9. 요구사항 분석 시 필요한 기술
- 청취 기술, 인터뷰 기술, 질문 기술, 분석 기술, 중재 기술, 관찰 기술, 작성 기술, 조직 기술, 모델 작성 기술

10. 자료 사전 기호

11. 데이터 흐름도(DFD)의 구성요소
- Process, Data Flow, Data Store, Terminator

12. 자료 흐름도(DFD)의 요소별 표기 형태
- 프로세스: 원, 데이터 플로우: 화살표, 데이터 스토어: 평생선(=), 터미네이터: 사각형

13. UML 확장 모델에서 스테레오 타입 객체를 표현할 때 사용하는 기호
- <<>> 길러멧

14. UML 모델에서 사용하는 Structural Diaagram(구조적 다이어그램)에 속하는 것
- 클객 컴배 복패
- 클래스, 객체, 컴포넌트, 복합체 구조, 패키지
- class, object, component, deployment, composite structure, package

15. uml 모델 클래스 관계 모형 공부하기

16. UML에서 활용되는 다이어그램 중, 시스템의 동작을 표현하는 행위(behaviora) 다이어그램
- 유스케이스 다이어그램, 시퀀스 다이어그램, 커뮤니케이션 다이어그램, 상태 다이어그램, 활동 다이어그램, 타이밍 다이어그램
- 행위적 다이어그램, 동적 다이어그램

17. 시퀀스 다이어그램의 구성항목
- 객체, 생명선, 실행, 메시지

18. 기본 유스케이스 수행 시 특별한 조건을 만족할 때 수행하는 유스케이스
- 확장
- 관계 공부하기

19. 시스템 내 클래스의 정적 구조를 표현하고 클래스와 클래스, 클래스의 속성 사이의 관계를 나타내는 건 클래스 다이어그램
- 다이어그램 공부하기

20. 유스케이스란?
- 시스템이 제공해야 하는 서비스
- 액터가 시스템을 통해 수행하는 일련의 행위
- 액터는 사용자가 시스템에 대해 수행하는 역할
- 액터는 시스템과 상호작용하는 사람 또는 사물
- 시스템은 전체 시스템 영역을 표현함

21. uml(unified modeling language)
- 기능적 모델은 사용자 측면에서 본 시스템 기능이며 uml에서는 유스케이스 다이어그램을 사용함.
- 정적 모델은 객체, 속성, 연관 관계, 오퍼레이션의 시스템 구조를 나타내며 uml에서는 class diagram을 사용함.
- 동적 모델은 시스템의 내부 동작을 말하며, uml에서는 sequence diagram, state diagram, activity diagram 사용
- state diagram은 객체들 사이의 메시지 교환을 나타내며, state diagram은 하나의 객체가 가진 상태와 그 상태의 변화에 의한 동작 순서를 나타냄.

22. 요구사항 모델링
- 애자일 방법, 유스케이스 다이어그램, 시퀀스 다이어그램
- 주로 uml을 사용함


23. 모델 관계공부하기
24. 오퍼레이션
- 클래스의 동작을 의미하며 클래스에 속하는 객체에 적용될 메서드를 정의한 것, 동작에 대한 인터페이스를 지칭함

25. 요구사항 정의 및 분석, 설계의 결과물을 표현하기 위한 모델링 과정에서 사용되는 다이어그램
- 데이터 플로우 다이어그램, 유엠엘 다이어그램, 이알 다이어그램

26. 순차 다이어그램
- 시퀀스 다이어그램
- 시간의 흐름에 따라 객체들이 주고받는 메시지의 전달 과정을 강조한다.
- 동적 다이어그램
- 행위적 다이어그램
- 교류 다이어그램의 한 종류로 볼 수 있다.
- 객체들의 상호작용을 나타내기 위해 사용한다.

27. xp, extream programming
- 용기, 의사소통, 피드백, 단순성, 존중
- 사용자의 요구사항은 언제든 변할 수 있다.
- 고객과 직접 대면하여 요구사항을 이야기하기 위해 사용자 스토리를 활용할 수 있다.
- 기존의 방법론에 비해 실용성을 강조했다.
- 의사소통 개선과 즉각적 피드백으로 소프트웨어 품질을 높이기 위한 방법론이다.
- 테스트 기반 개발(tdd)
- 소규모 개발 조직이 불확실하고 변경이 많은 요구를 접했을 때 적절하다.
- 익스트림 프로그래밍을 구동시키는 원리는 상식적인 원리와 경험을 최대한 끌어올리는 것이다.
- 대표적인 애자일 방법론 중 하나이다.
- 의사소통 개선과 즉각적 피드백으로 소프트웨어 품질을 높이기 위한 방법론이며, 기존의 방법론에 비해 실용성을 강조한다.
- 구체적인 실천 방법을 정의하고 있으며 개발 문서보다는 소스 코드에 중점을 둔다.

28. 애자일기법
- 절차와 도구보다 개인과 소통을 중요하게 생각함
- 소프트웨어가 잘 실행되는 데 가치를 둔다.
- 고객과의 피드백, 의사소통을 중요하게 생각한다.
- 작업 계획을 짧게 세워 요구 변화에 유연하고 신속하게 대응할 수 있다.
- 스크럼, 익스트럼 프로그래밍, 기능 중심 개발
- 빠른 릴리즈를 통해 문제점을 빠르게 파악할 수 있다.
- 진화하는 요구사항을 수용하는데 적합하다.
- 포괄적인 문서보다 동작하는 소프트웨어에 중점을 둔다.
- 계약 협상보다는 고객과의 협업에 더 가치를 둔다.
- 계획을 따르기 보다 변화에 대응하는 것에 더 가치를 둔다.


29. 유엠엘의 기본구성요소
- things(사물), relationshio(관계), diagram(다이어그램)
- 객체지향 시스템을 개발할 때 산출물을 명세화, 시각화, 문서화 하는데 사용된다.
- 개발하는 시스템을 이해하기 쉬운 형태로 표현하여 분석가, 의뢰인, 설계자가 효율적인 의사소통을 할 수 있게 해준다.
- 개발 방법론이나 개발 프로세스가 아니라 표준화된 모델링 언어이다.

30. 익스트림 프로그래밍의 기본원리
- 12가지 공부하기


31. dfd
- 자료 흐름 그래프 또는 버블 차트라고도 한다.
- 구조적 분석 기법에 이용된다.
- 화살표, 원, 사각형, 직선(단선, 이중선)으로 표시한다.
- 시간 흐름을 명확하게 표현할 수는 없다.

32. 소프트웨어 개발단계에서 요구분석 과정
- 분석 결과의 문서화를 통해 향후 유지보수에 유용하게 사용할 수 있다.
- 자료 흐름도, 자료 사전 등이 효과적으로 이용될 수 있다.
- 보다 구체적인 명세를 위해 소단위 명세서가 활용될 수 있다.
- 개발 비용이 가장 많이 소요되지는 않는다. (유지보수가 가장 많이 소요됨)

33. 요구사항 분석이 어려운 이유는?
- 개발자와 사용자 간의 지식아니 표현의 차이가 커서 상호 이해가 쉽지 않다.
- 사용자의 요구는 예외가 많아 열거와 구조화가 어렵다.
- 사용자의 요구사항이 모호하고 불명확하다.
- 소프트웨어 개발 과정 중에 요구사항이 계속 변할 수 있다.
-

34. 요구분석(requirement analysis)
- 요구분석은 소프트웨어 개발의 실제적인 첫 단계로 사용자의 요구에 대해 이해하는 단계라고 할 수 있다.
- 요구추출은 프로젝트 계획 단계에 정의한 문제의 범위 안에 있는 사용자의 요구를 찾는 단계이다.
- 도메인 분석은 요구에 대한 정보를 수집하고 배경을 분석하여 이를 토대로 모델링을 한다.
- 기능적 요구사항은 수행될 기능과 관련되어 소프트웨어가 가져야 하는 기능적 속성에 대한 요구사항을 의미한다.
- 비기능적 요구사항은 시스템 구축에 대한 성능, 보안, 품질, 안정 등에 대한 요구사항이다.
- 소프트웨어가 무엇을 해야 하는가를 추적하여 요구사항 명세를 작성하는 작업이다.
- 사용자의 요구를 추출하여 목표를 정하고 어떤 방식으로 해결할 것인지 결정하는 단계이다.
- 소프트웨어 개발의 출발점이면서 실질적인 첫번째 단계이다.
요구사항분석-> 설계 -> 구현-> 테스트->유지보수 단계
소프트웨어 시스템이 사용되는 동안 발견되는 오류를 정리하는 단계는 테스트 단계이다.


35. 애자일-스크럼
- 스크럼 마스터는 스크럼 프로세스를 다르고 팀이 스크럼을 효과적으로 활용할 수 있도록 보장하는 역할을 맡는다.
- 제품 백로그는 스크럼 팀이 해결해야 하는 목록으로 소프트웨어 요구사항, 아키텍처 정의 등이 포함된다.
- 스프린트는 2~4주의 짧은 개발 기간으로 반복적 수행으로 개발 품질을 향상한다.
- 속도는 한번의 스프린트에서 한 팀이 어느 정도의 제품 백로그를 감당할 수 있는지에 대한 추정치이다.

36. 유스케이스의 구성요소 간의 관계에 포함
- 일반화, 확장, 연관, 포함

37. 유스케이스 다이어그램
- 액터는 구현대상이 아닌 시스템 외부에서 시스템과 상호작용하는 존재로 사람뿐만 아니라 외부 시스템도 액터로 표현될 수 있다.
- 유스케이스는 사용자 측면에서의 요구사항으로 사용자가 원하는 목표를 달성하기 위해 수행할 내용을 기술한다.
- 시스템 액터는 다른 프로젝트에서 이미 개발되어 사용되고 있으며 본 시스템과 데이터를 주고받는 등 서로 연동되는 시스템을 말한다.
- 액터가 인식할 수 없는 시스템 내부의 기능을 하나의 유스케이스로 파악해서는 안된다.


38. 객체 지향 개념을 활용한 소프트웨어 구현
- 객체란 필요한 자료 구조와 수행되는 함수들을 가진 하나의 독립된 존재
- 상속은 개별 클래스를 상속관계로 묶음으로써 클래스간의 체계화된 전체 구조를 파악하기 쉽다.
- 같은 클래스에 속하는 개개의 객체이자 하나의 클래스에서 생성된 객체를 인스턴스라고 한다.
- 자바의 접근제어자 종류 공부하기

39. 유엠엘 - 순차 다이어그램(시퀀스)
- 객체 간의 동적 상호 작용을 시간 개념을 중심으로 모델링하는 것이다.
- 일반적으로 다이어그램의 수직 방향이 시간의 흐름을 나타낸다.
- 회귀메세지, 제어블록 등으로 구성된다.

40. 소프트웨어를 보다 쉽게 이해할 수 있고 적은 비용으로 수정할 수 있도록 겉으로 보이는 동작의 변화없이 내부구조를 변경하는 것 - 리팩토링
- 프로그램의 기능을 바꾸지 않으면서 중복제거, 단순화 등을 위해 시스템을 재구성함

41. case
-computer aided software engineering
- 개발 과정의 속도를 향상시킨다
- 소프트웨어 부품의 재사용을 가능하게 한다.
- 소프트웨어 생명주기의 전체 단계를 연결해주고 자동화해주는 통합된 도구를 제공한다.
- 프로그램의 구현과 유지보수 작업만을 중심으로 하는 것이 아닌, 요구분석, 설계, 구현, 검사 및 디버깅 과정 전체 또는 일부를 자동화한다.
- 소프트웨어, 하드웨어, 데이터베이스, 테스트 등을 통합하여 소프트웨어를 개발하는 환경을 조성한다.
- 그래픽 지원, 객체지향 뿐만 아닌 다양한 소프트웨어 개발 모혀 지원
- 표준화된 개발 환경 구축 및 문서 자동화 기능 제공
- 작업 과정 및 데이터 공유를 통해 작업자 간의 커뮤니케이션 증대



42. 상위 케이스도구
- 계획수립
- 요구분석
-기본 설계단계를 다이어그램으로 표현
- 모델들 사이의 모순 검사 및 모델의 오류검증, 일관섬 검증
- 자료 흐름도 프로토타이핑 작성 지원 및 유아이 설계 지원

43. 하위 케이스도구 공부하기
- 구문 중심 편집 및 정적 동적 테스트 지원
- 시스템 명세서 생성 및 소스코드 생성 지원

44. 케이스의 원천기술
- 구조적 기법, 프로토타이핑 기술, 자동프로그래밍 기술, 정보 저장소 기술, 분산처리 기술

45. 모델링
- 개발팀이 응용문제를 이해하는데 도움을 준다.
- 개발될 시스템에 대하여 여러 분야의 엔지니어들이 공통된 개념을 공유하는데 도움을 준다.
- 절차적인 프로그램을 위한 자료 후름도는 프로세스 위주의 모델링 방법이다
- 모델링은 유지보수 뿐만 아니라 분석, 설계, 구현 등 전반에 걸쳐 활용된다.
- 구조적 방법론에서는 dfd, dd 등을 사용하여 요구사항의 결과를 표현한다.
- 객체 지향 방법론에서는 uml 표기법을 사용한다.
- 소프트웨어 모델을 사용할 경우 개발될 소프트웨어에 대한 이해도 및 이해 당사자 간의 의사소통 향상에 도움이 된다.
- 모델링 작업의 결과물은 다른 모델링 작업에 영향을 줄 수 있다.

46. 요구사항 관리도구
- 요구사항 변경으로 인한 비용 편익 분석
- 요구사항 변경의 추적
- 요구사항 변경에 따른 영향 평가

47. 모델
- 모델은 개발 대상을 추상화하고 기호나 그림 등으로 시각적으로 표현한다.
- 모델을 통해 소프트웨어에 대한 이해도를 향상시킬 수 있다.
- 모델을 통해 이해 당사자간의 의사소통이 향상된다.
- 모델을 통해 향후 개발될 시스템의 유추가 가능하다.





